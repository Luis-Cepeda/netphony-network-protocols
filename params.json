{"name":"Cne-network-protocols","tagline":"Java Library of Networking Protocols: PCEP, RSVP, OSPF, BGP-LS","body":"netphony-network-protocols v1.2\r\n=================================\r\nThe netphony-network-protocols library is a set of implementations of the main networking protocols stacks that enable control and management functions: \r\n* PCEP protocol\r\n* RVP-TE protocol\r\n* OSPF-TE protocol\r\n* BGP-LS protocol\r\n\r\nAny software requiring the connection with a device/software that supports such protocols can easily integrate the protocol library. The library provides the encoding and decoding from java objects to bit-level. Note that, the state machine and set up of sessions is provided by other components, also available in github. \r\n\r\nThe library is maintained to be up-to-date to the latest version of the internet-drafts/RFCs. Contributions are highly welcomed.\r\n\r\n## Compilation and use\r\n\r\nThe library can be built using the maven tool. There is a set of junit tests included that tests the enconding/decoding process. Contributions on expanding the test suite are welcomed.\r\nTo build the .jar file and run the tests, simply clone the repository, go to the main directory and run\r\n ```bash\r\n    cd netphony-network-protocols\r\n    mvn package\r\n ```\r\n \r\n To use the library in your application, simply add the dependency in your pom.xml file:\r\n  ```xml\r\n    <dependency>\r\n      <groupId>es.tid.netphony</groupId>\r\n      <artifactId>network-protocols</artifactId>\r\n      <version>1.2</version>\r\n    </dependency>\r\n ```\r\n Authors keep also a copy of the artifact in maven central to facilitate the deployment.\r\n\r\n## How to use the code:\r\n\r\n### ENCODING\r\n\r\n1-> Create a new instance of the desired message\r\n ```java\r\n     PCEPRequest message = new PCEPRequest();\r\n ```\r\n2-> Create instances of the desired constructs or objects and add them to the message\r\n ```java\r\n     Request req = new Request();\r\n     //RequestParameters\r\n     RequestParameters rp= new RequestParameters();\r\n     rp.setPbit(true);\t\t\t\t\r\n     rp.setRequestID(123);\t\t\r\n     rp.setPrio(1);\t\t\r\n     rp.setReopt(false);\t\r\n     rp.setBidirect(false);\r\n     rp.setLoose(false);\r\n     req.setRequestParameters(rp);\r\n     //EndPoints\r\n     EndPointsIPv4 ep=new EndPointsIPv4();\t\t\t\t\r\n     req.setEndPoints(ep);\r\n     Inet4Address ipp = (Inet4Address)Inet4Address.getByName(\"172.16.101.101\");\r\n     ep.setSourceIP(ipp);\r\n\t.....\r\n    message.addRequest(req); \t\r\n ```\r\n3-> Call encode()\r\n```java\r\n   message.encode();\r\n```\r\n4-> Get bytes and send them!\r\n```java\r\n   out.write(message.getBytes());\r\n   out.flush();\r\n```\r\n## PCEP Support\r\n\r\nDetailed PCEP Support [click here](doc/PCEP_Support.md)\r\n\r\n* RFC 5440: Full compliance\r\n* RFC 5521: Path-key not supported\r\n* RFC 5886: Full compliance\r\n* RFC 6006: Only P2MP END-POINTS Object for IPv4\r\n* draft-ietf-pce-gmpls-pcep-extensions-10 (partial)\r\n* draft-ietf-pce-inter-layer-ext-05 (partial)\r\n* draft-ietf-pce-hierarchy-extensions-02\r\n* draft-ietf-pce-stateful-pce-05\r\n* draft-ietf-pce-pcep-stateful-pce-gmpls-00\r\n* draft-ietf-pce-pce-initiated-lsp-00:\r\n \r\n## RSVP-TE Support\r\n\r\nDetailed RSVP-TE Support [click here](doc/RSVP-TE_Support.md)\r\n\r\n\r\n## OSPF-TE Support\r\n\r\nDetailed OSPF-TE Support [click here](doc/OSPF-TE_Support.md)\r\n\r\nOSPF-TE v2 LSA from RFC3630\r\nInter-AS-TE-v2 LSA from RFC5392 http://tools.ietf.org/html/rfc5392\r\n\r\n# BGP-LS Support\r\n\r\nDetailed BGP4 & BGP-LS Support [click here](doc/BGP-LS_Support.md)\r\n\r\n\r\nhttp://tools.ietf.org/html/draft-ietf-idr-ls-distribution-03\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}